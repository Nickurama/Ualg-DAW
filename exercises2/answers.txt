1.
	1.a
		R: it will use version 1.2.2 (>=1.1.1, <2.0.0)
	1.b
		R: it will use version 1.1.2 (>=1.1.1, <1.2)
	1.c
		R: it will use version 0.2.0 (>=0.2.0, <0.3)

2.
	(ex2.ts)

3.
	3.a
		R:
			1
			3
			2
	3.b
		R: the first function, will just place the print to the console
		command to the stack, once it's done, the second will do the same,
		but as it's an asynchronous function, it will be passed to the thread
		pool by the event queue, where it then continues execution. Then the
		third function is called, placing the third print function to the
		stack and executing it. By then, the threadpool has finished the
		necessary setup, and the wait of 0ms has passed, so they place the
		task (printing) to the task queue. The task is then moved from the
		task queue to the stack, where it is executed.
	
	3.c
		(ex3.ts)
	
4.
	R: the output would be:
		1
		2
		3
		4
		5
5.
	R: it will print "step1 (random number)", then "step2 (random number)"
	and then "Something went wrong".

6.
	6.a.
		(ex6a.js)
	6.b.
		(ex6b.js)
	6.c.
		(ex6c.js)

7.
	R: We can conclude that async returns a promise

8.
	8.a.
		---
9.
	(ex9.tsc)

10.
	R: it will list all the listeners (first, second and third), and then
	it will initialize the event "event" with the params "1, 2, 3, 4, 5",
	so it will call all listeners, one without using any parameter, the other
	using only two parameters, and the last one with all the parameters.

11.
	R: it would not work because the function must be async, and it must be
	an await for loop. If it were correct, it would print each chunk of
	readable data as it's available.

12.
	(ex12.js)

13.
	(ex13.ts)
	async?

14.
	pergunta?
